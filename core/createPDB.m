function createPDB( ca,name )
%CREATPDBBYCA Summary of this function goes here
%   Detailed explanation goes here
% 13 - 16        Atom            Atom name 
% atom name start at 14 normally.
   fid=fopen(name,'w');
   PDB_Format_Dec = '%-6s%5i %-4s%1s%-4s%1s%4s%1s   %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%2s\n'; % atomNumber within 99999
   PDB_Format_hex = '%-6s%5X %-4s%1s%-4s%1s%4s%1s   %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%2s\n'; % atomNumber within 99999
   atomname_Format_3 = ' %-3s';
   if ~iscell(ca)
        if  length(ca)>99999
            PDB_Format = PDB_Format_hex;
        else
            PDB_Format = PDB_Format_Dec;
        end
        atomnames = {ca.atmname};
        is4 = cellfun(@length,atomnames) > 3;
        atomnames(~is4) = cellfun(@(x) sprintf(atomname_Format_3,x),atomnames(~is4),'uniformoutput',0);
        for i=1:length(ca)
%             resno=regexp(ca(i).resno,'[0-9]*','match');
%             insertion=regexpi(ca(i).resno,'[A-Z]','match');
%             if isempty(insertion)
%                 insertion{1}='';
%             end
            
            fprintf(fid,PDB_Format,ca(i).record,...
                                    ca(i).atomno,...
                                    atomnames{i},...
                                    ca(i).alternate,...
                                    ca(i).resname,...
                                    ca(i).subunit,...
                                    ca(i).resno,...
                                    ca(i).iCode,...
                                    ca(i).coord(1),...
                                    ca(i).coord(2),...
                                    ca(i).coord(3),...
                                    ca(i).occupancy,...
                                    ca(i).bval,...
                                    ca(i).segment,...
                                    ca(i).elementSymbol,...
                                    ca(i).charge);
        end 
   else
       for j=1:length(ca)
           fprintf(fid,'MODEL       %2i\n',j);
           model=ca{j};
            atomnames = {model.atmname};
            is4 = cellfun(@length,atomnames) > 3;
            atomnames(~is4) = cellfun(@(x) sprintf(atomname_Format_3,x),atomnames(~is4),'uniformoutput',0);
           for i=1:length(model)
%                 resno=regexp(model(i).resno,'[0-9]*','match');
%                 insertion=regexpi(model(i).resno,'[A-Z]','match');
%                 if isempty(insertion)
%                     insertion{1}='';
%                 end
                fprintf(fid,'%-6s%5i %-4s%1s%-4s%1s%4s%1s   %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s%2s\n', model(i).record,...
                                                                                                        model(i).atomno,...
                                                                                                        atomnames{i},...
                                                                                                        model(i).alternate,...
                                                                                                        model(i).resname,...
                                                                                                        model(i).subunit,...
                                                                                                        model(i).resno,...
                                                                                                        model(i).iCode,...
                                                                                                        model(i).coord(1),...
                                                                                                        model(i).coord(2),...
                                                                                                        model(i).coord(3),...
                                                                                                        model(i).occupancy,...
                                                                                                        model(i).bval,...
                                                                                                        model(i).segment,...
                                                                                                        model(i).elementSymbol,...
                                                                                                        model(i).charge);
           end
           fprintf(fid,'ENDMDL\n');
       end
       fprintf(fid,'\n');
   end
   fprintf(fid,'END');
fclose(fid);
end

